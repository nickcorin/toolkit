// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: event.proto

package fluxpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Flux_Dispatch_FullMethodName = "/fluxpb.Flux/Dispatch"
)

// FluxClient is the client API for Flux service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FluxClient interface {
	Dispatch(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Flux_DispatchClient, error)
}

type fluxClient struct {
	cc grpc.ClientConnInterface
}

func NewFluxClient(cc grpc.ClientConnInterface) FluxClient {
	return &fluxClient{cc}
}

func (c *fluxClient) Dispatch(ctx context.Context, in *StreamRequest, opts ...grpc.CallOption) (Flux_DispatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &Flux_ServiceDesc.Streams[0], Flux_Dispatch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &fluxDispatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Flux_DispatchClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type fluxDispatchClient struct {
	grpc.ClientStream
}

func (x *fluxDispatchClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FluxServer is the server API for Flux service.
// All implementations must embed UnimplementedFluxServer
// for forward compatibility
type FluxServer interface {
	Dispatch(*StreamRequest, Flux_DispatchServer) error
	mustEmbedUnimplementedFluxServer()
}

// UnimplementedFluxServer must be embedded to have forward compatible implementations.
type UnimplementedFluxServer struct {
}

func (UnimplementedFluxServer) Dispatch(*StreamRequest, Flux_DispatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Dispatch not implemented")
}
func (UnimplementedFluxServer) mustEmbedUnimplementedFluxServer() {}

// UnsafeFluxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FluxServer will
// result in compilation errors.
type UnsafeFluxServer interface {
	mustEmbedUnimplementedFluxServer()
}

func RegisterFluxServer(s grpc.ServiceRegistrar, srv FluxServer) {
	s.RegisterService(&Flux_ServiceDesc, srv)
}

func _Flux_Dispatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FluxServer).Dispatch(m, &fluxDispatchServer{stream})
}

type Flux_DispatchServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type fluxDispatchServer struct {
	grpc.ServerStream
}

func (x *fluxDispatchServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

// Flux_ServiceDesc is the grpc.ServiceDesc for Flux service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Flux_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fluxpb.Flux",
	HandlerType: (*FluxServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Dispatch",
			Handler:       _Flux_Dispatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "event.proto",
}
