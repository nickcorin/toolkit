// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nickcorin/toolkit/flux (interfaces: EventReader,EventWriter,EventStore)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -write_package_comment -write_source_comment -package mocks -destination event.go github.com/nickcorin/toolkit/flux EventReader,EventWriter,EventStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	flux "github.com/nickcorin/toolkit/flux"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -write_package_comment -write_source_comment -package mocks -destination event.go github.com/nickcorin/toolkit/flux EventReader,EventWriter,EventStore

// MockEventReader is a mock of EventReader interface.
type MockEventReader struct {
	ctrl     *gomock.Controller
	recorder *MockEventReaderMockRecorder
}

// MockEventReaderMockRecorder is the mock recorder for MockEventReader.
type MockEventReaderMockRecorder struct {
	mock *MockEventReader
}

// NewMockEventReader creates a new mock instance.
func NewMockEventReader(ctrl *gomock.Controller) *MockEventReader {
	mock := &MockEventReader{ctrl: ctrl}
	mock.recorder = &MockEventReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventReader) EXPECT() *MockEventReaderMockRecorder {
	return m.recorder
}

// Head mocks base method.
func (m *MockEventReader) Head(arg0 context.Context) (flux.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", arg0)
	ret0, _ := ret[0].(flux.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockEventReaderMockRecorder) Head(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockEventReader)(nil).Head), arg0)
}

// NextEvents mocks base method.
func (m *MockEventReader) NextEvents(arg0 context.Context, arg1, arg2 uint, arg3 time.Duration) ([]flux.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]flux.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextEvents indicates an expected call of NextEvents.
func (mr *MockEventReaderMockRecorder) NextEvents(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextEvents", reflect.TypeOf((*MockEventReader)(nil).NextEvents), arg0, arg1, arg2, arg3)
}

// MockEventWriter is a mock of EventWriter interface.
type MockEventWriter struct {
	ctrl     *gomock.Controller
	recorder *MockEventWriterMockRecorder
}

// MockEventWriterMockRecorder is the mock recorder for MockEventWriter.
type MockEventWriterMockRecorder struct {
	mock *MockEventWriter
}

// NewMockEventWriter creates a new mock instance.
func NewMockEventWriter(ctrl *gomock.Controller) *MockEventWriter {
	mock := &MockEventWriter{ctrl: ctrl}
	mock.recorder = &MockEventWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventWriter) EXPECT() *MockEventWriterMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventWriter) CreateEvent(arg0 context.Context, arg1, arg2 string) (flux.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(flux.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventWriterMockRecorder) CreateEvent(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventWriter)(nil).CreateEvent), arg0, arg1, arg2)
}

// MockEventStore is a mock of EventStore interface.
type MockEventStore struct {
	ctrl     *gomock.Controller
	recorder *MockEventStoreMockRecorder
}

// MockEventStoreMockRecorder is the mock recorder for MockEventStore.
type MockEventStoreMockRecorder struct {
	mock *MockEventStore
}

// NewMockEventStore creates a new mock instance.
func NewMockEventStore(ctrl *gomock.Controller) *MockEventStore {
	mock := &MockEventStore{ctrl: ctrl}
	mock.recorder = &MockEventStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventStore) EXPECT() *MockEventStoreMockRecorder {
	return m.recorder
}

// CreateEvent mocks base method.
func (m *MockEventStore) CreateEvent(arg0 context.Context, arg1, arg2 string) (flux.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(flux.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockEventStoreMockRecorder) CreateEvent(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockEventStore)(nil).CreateEvent), arg0, arg1, arg2)
}

// Head mocks base method.
func (m *MockEventStore) Head(arg0 context.Context) (flux.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Head", arg0)
	ret0, _ := ret[0].(flux.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Head indicates an expected call of Head.
func (mr *MockEventStoreMockRecorder) Head(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockEventStore)(nil).Head), arg0)
}

// NextEvents mocks base method.
func (m *MockEventStore) NextEvents(arg0 context.Context, arg1, arg2 uint, arg3 time.Duration) ([]flux.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextEvents", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]flux.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextEvents indicates an expected call of NextEvents.
func (mr *MockEventStoreMockRecorder) NextEvents(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextEvents", reflect.TypeOf((*MockEventStore)(nil).NextEvents), arg0, arg1, arg2, arg3)
}
