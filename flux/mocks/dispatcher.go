// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nickcorin/toolkit/flux (interfaces: Dispatcher)
//
// Generated by this command:
//
//	mockgen -write_generate_directive -write_package_comment -write_source_comment -package mocks -destination dispatcher.go github.com/nickcorin/toolkit/flux Dispatcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	flux "github.com/nickcorin/toolkit/flux"
	gomock "go.uber.org/mock/gomock"
)

//go:generate mockgen -write_generate_directive -write_package_comment -write_source_comment -package mocks -destination dispatcher.go github.com/nickcorin/toolkit/flux Dispatcher

// MockDispatcher is a mock of Dispatcher interface.
type MockDispatcher struct {
	ctrl     *gomock.Controller
	recorder *MockDispatcherMockRecorder
}

// MockDispatcherMockRecorder is the mock recorder for MockDispatcher.
type MockDispatcherMockRecorder struct {
	mock *MockDispatcher
}

// NewMockDispatcher creates a new mock instance.
func NewMockDispatcher(ctrl *gomock.Controller) *MockDispatcher {
	mock := &MockDispatcher{ctrl: ctrl}
	mock.recorder = &MockDispatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDispatcher) EXPECT() *MockDispatcherMockRecorder {
	return m.recorder
}

// Dispatch mocks base method.
func (m *MockDispatcher) Dispatch(arg0 context.Context, arg1 flux.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch.
func (mr *MockDispatcherMockRecorder) Dispatch(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockDispatcher)(nil).Dispatch), arg0, arg1)
}
